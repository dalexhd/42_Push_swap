53, 655, 379, 317, 498, 71, -47, -599, 33, 617, 180, -711, 293, 507, 166, -624, -710, -764, 151, -819, 241, 478, 780, -688, -641, 233, -625, -392, 743, 899, 846, -39, 456, -827, 921, -508, 331, -359, 811, -752, 34, 75, -60, -292, -537, 865, -871, 476, 542, -922, -133, 643, 867, -559, 153, 232, -704, -301, 799, -429, 656, 283, 231, -503, -717, 323, 662, -957, -785, 843, -459, -205, -732, -909, 958, 339, -916, -897, -88, -377, 562, -330, -880, 84, -306, 216, 950, -184, 341, -250, -944, -938, -406, 986, 462, 720, -652, 836, -538, -928, -382, 537, 874, 793, 307, -727, 291, 129, 257, -208, 148, -771, -357, -812, -716, -823, 385, 103, 217, 192, -421, 536, 230, 314, -25, 609, 187, -843, 315, -138, -660, -311, -698, -328, -132, 682, -469, 657, 284, -845, -192, -574, -347, -245, -446, 4, 243, -692, -950, 695, -582, -683, -946, -662, -464, 547, -114, -163, -451, -246, 692, -558, 420, -277, 691, 821, 191, -858, -180, 142, 621, -724, -273, 229, -30, -677, 248, -222, -804, -199, 677, 270, -568, 213, 244, 767, -935, 326, 598, 486, 795, -959, -492, 816, -682, -343, -976, -218, -322, 261, -664, -992, -947, -149, 977, -781, 665, 418, 141, -129, -527, -555, -37, 833, 775, 115, -101, -949, 263, -648, 938, -8, -196, -932, 311, -331, 465, 48, -927, 968, -605, 732, -736, 766, -487, -673, 807, -591, -309, 912, -815, 707, -472, 594, 663, 458, 300, 873, 150, -920, -671, -194, 511, 989, 866, -342, 118, 185, -11, -860, -602, -173, 447, 411, -929, 831, -141, -308, -552, 377, -493, -272, 0, 869, -500, -773, -415, -283, -750, 935, -499, 842, -607, 954, 480, -318, 629, 40, -759, 161, 659, -70, 763, 234, -975, -189, 777, 425, 930, -268, -408, 370, -130, 908, 875, 929, -616, 99, 614, 510, 292, -651, -931, 607, -942, 67, -255, -256, 387, -323, -478, 135, -971, -483, -43, -691, -128, 517, 789, 556, -679, -187, 324, -329, -868, -275, 972, -364, 35, 87, 207, 394, -115, 484, -776, 439, 857, -729, 905, -426, 83, 354, 932, -198, 773, -978, -412, 848, 898, 575, -693, -302, -170, 612, -841, 274, -655, 650, -260, -498, 199, -925, -751, 376, -615, -576, 758, -416, 579, -530, -477, 362, 808, -905, -800, 424, -782, -638, 966, -674, -937, 136, 616, 466, 381, 539, 39, 196, 830, -370, -791, 77, 639, -463, 343, 855, -183, 32, 211, 671, -327, -757, -90, -471, 355, -936, 792, -91, -496, -119, 859, 648, 516, 404, 960, -762, 247, 726, -998, -165, -548, 90, 444, -619, 660, -447, -824, 541, -629, -393, 3, 499, -432, -424, -861, 535, -919, -399, 440, 589, 294, -58, 991, -48, -72, -116, 64, -597, -227, 114, 251, -962, 463, -387, 784, 159, -628, -893, 725, 325, 735, 731, -262, 500, 829, 430, 140, 768, -368, 722, 996, 509, -142, 802, 333, -341, -681, -127, -510, 658, -113, 581, -495, -62, 390, 628, 6, 923, -310, 37




void	ft_sortint(t_push *push)
{
	int	y;
	int	tmp;

	y = 0;
	tmp = 0;
	while (y < push->countG - 1)
	{
		if (*push->intmod[y] == *push->intmod[y + 1])
			ft_error(2);
		if (*push->intmod[y] > *push->intmod[y + 1] && *push->intmod[y + 1])
		{
			tmp = *push->intmod[y];
			*push->intmod[y] = *push->intmod[y + 1];
			*push->intmod[y + 1] = tmp;
		}
		y++;
	}
	y = 0;
	while (y < push->countG - 1)
	{
		if (*push->intmod[y] < *push->intmod[y + 1])
			y++;
		else
			ft_sortint(push);
	}
}